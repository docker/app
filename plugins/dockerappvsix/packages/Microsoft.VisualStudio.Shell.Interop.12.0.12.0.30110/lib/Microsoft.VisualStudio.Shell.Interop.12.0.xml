<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Shell.Interop.12.0</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__RETARGET_CHECK_OPTIONS">
      <summary>Specifies some project/solution load options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__RETARGET_CHECK_OPTIONS.RCO_FIRST_SOLUTION_LOAD">
      <summary> The project/solution is being loaded for the first time.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__RETARGET_CHECK_OPTIONS.RCO_NO_PROMPT">
      <summary>A flag used on solution load case after the first time the solution was opened. No prompt is displayed, and the load sequence proceeds with the default action on Cancel. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__RETARGET_CHECK_OPTIONS.RCO_NONE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__RETARGET_CHECK_OPTIONS.RCO_PROJECT_LOAD">
      <summary>Set when called after project load.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__RETARGET_CHECK_OPTIONS.RCO_PROJECT_RELOAD">
      <summary>Set when called after project load.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__RETARGET_CHECK_OPTIONS.RCO_PROJECT_RETARGET">
      <summary>Set when invoking the Retarget Project command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__RETARGET_CHECK_OPTIONS.RCO_REQUIRED_ONLY">
      <summary>Specifies that only project that have IVsProjectTargetChange.UnloadOnCancel = true should be considered.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__RETARGET_CHECK_OPTIONS.RCO_SOLUTION_RETARGET">
      <summary>Set when invoking the Solution Retarget command.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__RETARGET_OPTIONS">
      <summary>Specifies some project retarget options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__RETARGET_OPTIONS.RO_BACKUP">
      <summary>Specifies that backup should be performed, if it is supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__RETARGET_OPTIONS.RO_NONE">
      <summary>No options.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__RETARGET_TASK_PRIORITY">
      <summary>Specifies the priority of the task.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__RETARGET_TASK_PRIORITY.RTP_Critical">
      <summary>Critical priority.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__RETARGET_TASK_PRIORITY.RTP_High">
      <summary>High priority.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__RETARGET_TASK_PRIORITY.RTP_Low">
      <summary>Low priority.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__RETARGET_TASK_PRIORITY.RTP_Normal">
      <summary>Normal priority.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__TABIMAGEFLAGS">
      <summary>Indicates some properties of the tab image. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__TABIMAGEFLAGS.TIF_DPI_SCALED">
      <summary>The image is already scaled up for the current DPI zoom level.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__TABIMAGEFLAGS.TIF_NONE">
      <summary>No flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__TABIMAGEFLAGS.TIF_THEMABLE">
      <summary>The image can be themed before it is displayed. In other words it is not an unthemable icon obtained from the file system.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSArrangeWindowFlags">
      <summary>Specifies how the windows are to be arranged.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSArrangeWindowFlags.AWF_Height">
      <summary>Change the height of the window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSArrangeWindowFlags.AWF_Left">
      <summary>Change the X coordinate of the window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSArrangeWindowFlags.AWF_Top">
      <summary>Change the Y coordinate of the window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSArrangeWindowFlags.AWF_Width">
      <summary>Change the width of the window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS120">
      <summary>Specifies debug launch flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS120.DBGLAUNCH_ALLOW_EVENTS_AFTER_STOPPED">
      <summary>Allows stopping events in break-mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS120.DBGLAUNCH_FORCE_32BIT_DEBUG">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS120.DBGLAUNCH_FORCE_64BIT_DEBUG">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID6">
      <summary>Specifies property identifiers for window frames, document frames, and tool window frames.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID6.VSFPROPID_PendingInitialization">
      <summary>Determines whether a window is a delay-loaded frame that hasn't yet been fully initialized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID6.VSFPROPID_TabImageFlags">
      <summary>Indicates values from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__TABIMAGEFLAGS" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID6.VSFPROPID6_FIRST">
      <summary>Indicates the first property ID.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID6">
      <summary>Specifies properties of the Visual Studio shell.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID6.VSHPROPID_ConnectedServicesPersistence">
      <summary>VT_UNKNOWN [optional] Returns the implementation of IVsPersistConnectedServices for a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID6.VSHPROPID_CurrentTargetId">
      <summary>GUID [optional] Current target id for the project hierarchy. Currently implemented on the stub hierarchy for projects that are unloaded during retargeting check.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID6.VSHPROPID_FIRST6">
      <summary>The first property.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID6.VSHPROPID_NewTargetId">
      <summary>GUID [optional] The default new target id for retargeting. Currently implemented on the stub hierarchy for projects that are unloaded during retargeting check.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID6.VSHPROPID_NuGetPackageProjectTypeContext">
      <summary>VT_BSTR [optional] Returns an optional string (VSITEMID_ROOT) that Nuget will consume and pass along as an opaque string to the Nuget servers when doing installs of packages. This provides additional telemetry data (in addition to the project type GUIDs) which can be used to improve features like Suggested Packages that are based on the project type and what users of that project type are installing. This is especially useful if a single project type supports multiple technologies and the project type GUID does not provide enough differentiation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID6.VSHPROPID_ProjectRetargeting">
      <summary>VT_UNKNOWN [optional] Returns the implementation of IVsRetargetProject for a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID6.VSHPROPID_RequiresLegacyManagedDebugEngine">
      <summary>VT_BOOL [optional] Returns a bool that determines whether the project requires the legacy managed debug engine (cpde.dll) when debugging the managed code in this project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID6.VSHPROPID_ScriptJmcProjectControl">
      <summary>VT_ARRAY [optional] Returns the list of implementations of IVsScriptJmcProjectControl for a project. (JMC = JustMyCode.)  IVsScriptJmcProjectControl is used by the debugger to query projects for the user/non-user code status of a source file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID6.VSHPROPID_ShowAllProjectFilesInProjectView">
      <summary>VT_BOOL [optional] Indicates that all the project files should be visible in solution explorer by default. This property is added to give Visual Basic flavored project systems the power to change the default visibility of special files in Solution Explorer. For example, by default all the dependent files in Visual Basic projects aren’t shown in Solution Explorer, and a flavored project could return true for this property to show those files.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID6.VSHPROPID_Subcaption">
      <summary>VT_BSTR [optional] Returns an optional string that is shown in Solution Explorer. The current implementation honors this property only for hierarchy root nodes. For example, with Windows Store projects targeting Windows 8.1, the sub-caption is "Windows 8.1" for the project node, and the final text in the Solution Explorer is "&lt;Project caption&gt; (Windows 8.1)".</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS2"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS2.IDO_IncludeUninitializedFrames">
      <summary>Indicates that uninitialized document window frames should be considered in searches.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSNEWDOCUMENTSTATE2">
      <summary>Specifies how to open a document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSNEWDOCUMENTSTATE2.NDS_Reserved">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSNEWDOCUMENTSTATE2.NDS_TryProvisional">
      <summary>Open the document in a preview window if the editor supports preview, otherwise open it in a permanent window. This value must be used alone; it cannot be combined with other flags.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPROPID6">
      <summary>Identifies property settings for a solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID6.VSPROPID_FIRST6">
      <summary>Specifies the first VSPROPID in this version.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID6.VSPROPID_IsSolutionInEndRetargetingBatch">
      <summary>VARIANT_TRUE when the solution is in batch retargeting. Used to avoid reentering retargetting.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID">
      <summary>Specifies properties for the targeting capability.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_AcquisitionCommandTitle">
      <summary>BSTR, optional, default null. The text for the Acquisition project context menu command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_AcquisitionComponents">
      <summary>VARIANT, optional, default NULL. The components for the Setup driver to install, format specific. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_AcquisitionSetupDriver">
      <summary>IVsProjectAcquisitionSetupDriver, optional, default null. The setup driver for installing the missing component.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_DoBackup">
      <summary>BOOL, optional, default false. Sent backup flag to RetargetProject.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_DoNotAdvertiseRetarget">
      <summary>BOOL, optional, default FALSE. Specifies whether to offer retarget on first load.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_IncludeAllProjectsForProjectRetargeting">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_InitUnselectedInSolutionRetargeting">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_MigrationNextStepGuidanceLink">
      <summary>BSTR, optional, default NULL. Specifies a URL to open in the IDE after retargeting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_MissingPrerequisites">
      <summary>BOOL, optional, default false. There are missing components (Visual Studio and/or SDKs) that are needed for the proper operation of projects using this target.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_ProjectRetargetingDescription">
      <summary>BSTR, required. The description for this target section, when the project is offered for retargeting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_ProjectRetargetingGuidanceLink">
      <summary>BSTR, optional, default NULL. Specifies a URL to incorporate into the retarget dialog and to open in Visual Studio every time a project is being unloaded  because it first needs to be retarget.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_ProjectRetargetingTaskPriority">
      <summary>WORD, optional, default RTP_Low.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_ProjectRetargetingTitle">
      <summary>BSTR, required. The title to display for this target section, when project is offered for retargeting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_ProjectUnloadUntilRetargetedDescription">
      <summary>BSTR, required. The description for this target section, when the project will be unloaded.  </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_ProjectUnloadUntilRetargetedTaskPriority">
      <summary>DWORD, optional, default RTP_Low.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_ProjectUnloadUntilRetargetedTitle">
      <summary>BSTR, required. The title to display for this target section, when the project will be unloaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_RetargetProjectCommandTitle">
      <summary>BSTR, optional, default null. The text for the retarget project context menu command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_RetargetSolutionCommandTitle">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_UnloadInfoLine">
      <summary>BSTR, optional, default null. The unloaded info line in case the project is unloaded for retargeting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTDPROPID.VSPTDPROPID_UnloadTitle">
      <summary>STR, optional, default null. The project title addition in case the project is unloaded for retargeting.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB3">
      <summary>Specifies information about a document in the running document table (RDT).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB3.RDTA_DocumentInitialized">
      <summary>A document was added to the RDT in a fully-initialized state, or a document that had the property RDT_PendingInitialization has completed its initialization.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB3.RDTA_HierarchyInitialized">
      <summary>A document that had the property RDT_PendingHierarchyInitialization has completed its hierarchy initialization.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHNAVIGATIONKEY2">
      <summary>Provides an enumeration of keyboard keys (enter, navigation arrows, page up/page down) that are forwarded by the common search control to your <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearch" /> implementation (through a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearch.OnNavigationKeyDown(System.UInt32,System.UInt32)" />). You can then intercept these key presses and provide actions specific to your window (for example, select the previous or next search result, execute the currently-selected result, and so on).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSEARCHNAVIGATIONKEY2.SNK_ESCAPE">
      <summary>The ESC key was pressed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID6">
      <summary>Specifies additional shell property settings for the environment. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID6.VSSPROPID_FIRST6">
      <summary>Flag indicating the first property identifier in this group of identifiers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID6.VSSPROPID_LongIdleDuration">
      <summary>UI4, read-only. The number of seconds since the shell entered a long idle state (without user input). Property change notifications are not raised for this property.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID6.VSSPROPID_LongIdleState">
      <summary>BOOL, read-only. Determines whether the shell is in a long idle state (without user input).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID6.VSSPROPID_ShutdownStarted">
      <summary>BOOL, read-only. True if the shell has begun shutting down.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS2"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCONTINUATIONOPTIONS2.VSTCO_CancelWithParent">
      <summary>Cancel the task along with the parent.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKCREATIONOPTIONS2"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTASKCREATIONOPTIONS2.VSTCRO_CancelWithParent">
      <summary>Cancel the task along with the parent.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__XMLMEMBERDATA_DEPRECATION_TYPE">
      <summary>Specifies the type of deprecation for XML member data.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__XMLMEMBERDATA_DEPRECATION_TYPE.XMLMEMBERDATA_DEPRECATION_TYPE_DEPRECATE">
      <summary>Deprecate.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__XMLMEMBERDATA_DEPRECATION_TYPE.XMLMEMBERDATA_DEPRECATION_TYPE_REMOVE">
      <summary>Remove.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSLONGIDLEREASON">
      <summary>Specifies the reason for a long idle.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSLONGIDLEREASON.LIR_NOUSERINPUT">
      <summary>A time interval (specified during the AdviseLongIdleEvents call) has passed without any user input.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSLONGIDLEREASON.LIR_SCREENSAVERACTIVE">
      <summary>The screen saver was activated.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSLONGIDLEREASON.LIR_SESSIONLOCKED">
      <summary>The desktop/session is locked.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSProjectUnloadStatus2">
      <summary>Represents different reasons for unloading a project. Used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution4.UnloadProject(System.Guid@,System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSProjectUnloadStatus2.UNLOADSTATUS_NeedComponents">
      <summary>The project was unloaded because some components (Visual Studio components or SDKs) are not installed on the system, and the components are essential for the proper operation of this project. In order to be loaded, the project has to install the missing components.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSProjectUnloadStatus2.UNLOADSTATUS_NeedRetarget">
      <summary>The project was unloaded because project target is not supported by current version or edition of Visual Studio. The project must be retargeted before it can be reloaded.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS4">
      <summary>Specifies options for a document in the running document table (RDT).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS4.RDT_PendingHierarchyInitialization">
      <summary>The document's hierarchy hasn't yet been initialized; it will be initialized on demand. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS4.RDT_PendingInitialization">
      <summary>The document hasn't yet been initialized; it will be initialized on demand. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS3">
      <summary>Specifies attributes of a tree List.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSTREEFLAGS3.TF_NOWAITCURSOR">
      <summary>If all lists in the merged list have this flag set, avoid displaying the hourglass cursor.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.AppToastCapability">
      <summary>Specifies toast capabilities.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AppToastCapability.ATC_No">
      <summary>No toast capability.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AppToastCapability.ATC_Unset">
      <summary>Toast capability is not set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.AppToastCapability.ATC_Yes">
      <summary>Toast capability.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDesignerService2">
      <summary>Provides programmatic access to a project's .appxmanifext file. You can use it to open a DocData object provided by the Manifest Designer, ensure that it is registered in the running document table (RDT), and return a document handle object that implements two interfaces: IVsDocumentLockHolder and IVsInvisibleEditor. This forces any existing document window to close, and causes the returned document handle to hold a RDT_EditLock. When you need to keep the document handle for longer periods of time, cast it to IVsInvisibleEditor and use GetDocData to get a pointer to a fresh object model. When finished with the document handle, always call IVsDocumentLockHolder.CloseDocumentHolder(), usually passing (uint)__FRAMECLOSE.FRAMECLOSE_SaveIfDirty as the save option. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDesignerService2.OpenAppxManifestDesigner(Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder,Microsoft.VisualStudio.Shell.Interop.AppxManifestDesignerTab)">
      <summary>Opens the .appxmanifest designer.</summary>
      <returns>The HRESULT.</returns>
      <param name="documentHandle">The document handle.</param>
      <param name="tab">The designer tab.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDesignerService2.OpenAppxManifestDocument(System.Object,Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder@,Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument@)">
      <summary>Opens the .appxmanifest file in the specified project.</summary>
      <returns>The HRESULT.</returns>
      <param name="project">A pointer to the project. The object can be either an IVsHierarchy or a DTE.</param>
      <param name="documentHandle">The document lock.</param>
      <param name="appxManifestDocument">The document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDesignerService2.OpenAppxManifestDocument(System.Object,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder@,Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2@)">
      <summary>Opens the .appxmanifest file in the specified file.</summary>
      <returns>The HRESULT.</returns>
      <param name="Project">The project.</param>
      <param name="forceSaveAndClose">true if an open copy of the file should be saved, otherwise false.</param>
      <param name="documentHandle">The document lock.</param>
      <param name="appxManifestDocument">The document.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2">
      <summary>Provides an object model for the app manifest of the current project. It is implemented by the DocData object of the app manifest designer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.AddCapability(System.String)">
      <summary>Adds the specified capability to the manifest if it is not already present.</summary>
      <param name="capabilityId">[in] The capability to add to the manifest.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.ApplicationStartPage">
      <summary>Gets or sets the application start page.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.ApplicationToastCapable">
      <summary>Gets or sets the <see cref="T:Microsoft.VisualStudio.Shell.Interop.AppToastCapability" />. </summary>
      <returns>Returns <see cref="T:Microsoft.VisualStudio.Shell.Interop.AppToastCapability" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.Capabilities">
      <summary>Gets a list of all capabilities currently declared in the manifest, which may include both standard capabilities and device capabilities.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.GetFileOpenPickerExtension(System.String@,System.String@,System.String@,System.String@,Microsoft.VisualStudio.Shell.Interop.IAppxFileOpenPickerExtension@)">
      <summary>Gets the File Open Picker extension.</summary>
      <returns>true if there is a File Open Picker extension associated with the manifest.</returns>
      <param name="executable">[out] The executable field of the app manifest.</param>
      <param name="entryPoint">[out] The entryPoint field of the app manifest.</param>
      <param name="runtimeType">[out] The runtimeType field of the app manifest.</param>
      <param name="startPage">[out] The startPage field of the app manifest.</param>
      <param name="fileOpenPickerExtensionData">[out] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IAppxFileOpenPickerExtension" /> object that allows mutation of the manifest's File Open Picker extension.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.GetSearchExtension(System.String@,System.String@,System.String@,System.String@)">
      <summary>Gets the Search extension.</summary>
      <returns>true if there is a Search extension associated with the manifest.</returns>
      <param name="executable">[out] The executable field of the app manifest.</param>
      <param name="entryPoint">[out] The entryPoint field of the app manifest.</param>
      <param name="runtimeType">[out] The runtimeType field of the app manifest.</param>
      <param name="startPage">[out] The startPage field of the app manifest.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.GetShareExtension(System.String@,System.String@,System.String@,System.String@,Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension@)">
      <summary>Gets the Share extension.</summary>
      <returns>true if there is a Share extension associated with the manifest.</returns>
      <param name="executable">[out] The executable field of the App manifest.</param>
      <param name="entryPoint">[out] The entryPoint field of the app manifest.</param>
      <param name="runtimeType">[out] ] The runtimeType field of the app manifest.</param>
      <param name="startPage">[out] The startPage field of the app manifest.</param>
      <param name="shareExtensionData">[out] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IAppxShareExtension" /> object that allows mutation of the manifest's File Open Picker extension.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.HasCapability(System.String)">
      <summary>Detects if the specified capability is currently declared in the manifest.</summary>
      <returns>true if the given capability is currently declared in the manifest.</returns>
      <param name="capabilityId">[in] The identifier of the capability.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.MapCapabilitySid(System.String,System.String@,System.String@)">
      <summary>Produces a capability identifier and a localized name from the specified capability security identifier (SID), such as "S-1-15-3-1" or "S-1-15-3-BFA794E4-F964-4FDB-90F6-51056BFE4B44".</summary>
      <param name="sid">[in] The capability security identifier.</param>
      <param name="capabilityId">[out] The capability identifier.</param>
      <param name="localizedCapabilityName">[out] The localized capability name.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.OSMaxVersionTested">
      <summary>Gets or sets the highest operating system tested, for example 6.3.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.OSMinVersion">
      <summary>Gets or sets the minimum operating system supported (such as 6.3).</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.PackageVersion">
      <summary>Gets or sets the package version.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.RemoveCapability(System.String)">
      <summary>Removes the specified capability from the manifest if it is currently present.</summary>
      <param name="capabilityId">[in] The identifier of the capability to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.RemoveFileOpenPickerExtension">
      <summary>Removes the File Open Picker extension.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.RemoveSearchExtension">
      <summary>Removes the Search extension.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.RemoveShareExtension">
      <summary>Removes the share extension.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.SetFileOpenPickerExtension(System.String,System.String,System.String,System.String)">
      <summary>Sets the File Open Picker extension.</summary>
      <returns>The File Open Picker extension object that provides access to additional data elements in the manifest.</returns>
      <param name="executable">[in] The executable field of the app manifest. This parameter is optional.</param>
      <param name="entryPoint">[in] The entryPoint field of the app manifest. This parameter is optional.</param>
      <param name="runtimeType">[in] The runtimeType field of the app manifest. This parameter is optional.</param>
      <param name="startPage">[in] The startPage field of the app manifest. This parameter is optional.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.SetSearchExtension(System.String,System.String,System.String,System.String)">
      <summary>Sets the Search extension.</summary>
      <param name="executable">[in] The executable field of the app manifest. This parameter is optional.</param>
      <param name="entryPoint">[in] The entryPoint field of the app manifest. This parameter is optional.</param>
      <param name="runtimeType">[in] The runtimeType field of the app manifest. This parameter is optional.</param>
      <param name="startPage">[in] The startPage field of the app manifest. This parameter is optional.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.SetShareExtension(System.String,System.String,System.String,System.String)">
      <summary>Sets the Share extension.</summary>
      <returns>The Share extension object that provides access to additional data elements in the manifest.</returns>
      <param name="executable">[in] The executable field of the app manifest. This parameter is optional.</param>
      <param name="entryPoint">[in] The entryPoint field of the app manifest. This parameter is optional.</param>
      <param name="runtimeType">[in] The runtimeType field of the app manifest. This parameter is optional.</param>
      <param name="startPage">[in] The startPage field of the app manifest. This parameter is optional.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IAppxManifestDocument2.StandardCapabilities">
      <summary>Gets the fixed list of standard capabilities.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject2">
      <summary>Represents an aggregatable project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject2.OnAggregationFailure">
      <summary>Called if an error occurs while creating inner layers from aggregation chain after the current flavor object is being created by its factory. This should be used to disconnect any references current flavor holds to inner or outer flavor objects. OnAggregationFailure will be called individually on each flavor. Implementation should not chain the call to to inner flavor (as opposed to OnAggregationComplete which should be chained to inner). This method will not be called if all flavors layers are successfully created via PreCreateForOuter and succeeded on SetInnerProject and InitializeForOuter calls. If the error occurs later in the process ( inside OnAggregationComplete ) then IVsHierarchy::Close() will be called instead.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper">
      <summary>Represents the bootstrapper.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper.AdviseAppContainerBootstrapperEvents(Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperEvents)">
      <summary>Subscribes to bootstrapper events.</summary>
      <returns>The event cookie.</returns>
      <param name="sink">The event sink.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper.BootstrapAsync(System.String,System.String,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper.BootstrapForDebuggingAsync(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
      <summary>Asynchronously bootstraps given target and established    // debugger host for debugging the app represented by recipe.    // bootstrapperOperation: </summary>
      <returns>An IVsTask whose result is an instance of IVsAppContainerBootstrapperResult, or an error code. This is E_ABORT if called on the main thread and an advised callback has aborted the operation; otherwise S_OK.</returns>
      <param name="projectUniqueName">The name of the project</param>
      <param name="target">The target.</param>
      <param name="recipePath">The recipe path.</param>
      <param name="logger">An optional callback to receive output messages.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper.UnadviseAppContainerBootstrapperEvents(System.UInt32)">
      <summary>Unsubscribes from bootstrapper events.</summary>
      <param name="cookie">The event cookie.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperEvents">
      <summary>Represents bootstrapper events.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperEvents.OnBootstrapEnd(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperResult)">
      <summary>Called after bootstrapping is complete. Note the event will be fired after IVsAppContainerBootstrapperCallback::OnEndBootstrap() is called.</summary>
      <param name="projectUniqueName">The project.</param>
      <param name="target">The target.</param>
      <param name="result">The result.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperEvents.OnBootstrapForDebuggingEnd(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperResult)">
      <summary>Called after bootstrapping for debugging is complete. Note the event will be fired after IVsAppContainerBootstrapperCallback::OnEndBootstrap() is called.</summary>
      <param name="projectUniqueName">The name of the project.</param>
      <param name="target">The target.</param>
      <param name="recipePath">The recipe path.</param>
      <param name="result">The result.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperEvents.OnBootstrapForDebuggingStart(System.String,System.String,System.String)">
      <summary>Called before bootstrapping for debugging begins. Only fired if no-one cancelled deploy in QueryBootstrapStart().</summary>
      <param name="projectUniqueName">The name of the project.</param>
      <param name="recipePath">The recipe path.</param>
      <param name="target">The target.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperEvents.OnBootstrapStart(System.String,System.String)">
      <summary>Called before bootstrapping begins. Only fired if no-one cancelled deploy in QueryBootstrapStart()</summary>
      <param name="projectUniqueName">The name of the project.</param>
      <param name="target">The target.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperEvents.QueryBootstrapForDebuggingStart(System.String,System.String,System.String,System.Boolean@,System.String@)">
      <summary>Called before bootstrapping for debugging begins. This event gives opportunity for components to stop the bootstrapping process.</summary>
      <param name="projectUniqueName">The name of the project.</param>
      <param name="target">The target.</param>
      <param name="recipePath">The recipe path.</param>
      <param name="cancel">Whether or not this is canceled.</param>
      <param name="cancelReason">The reason for the cancelation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperEvents.QueryBootstrapStart(System.String,System.String,System.Boolean@,System.String@)">
      <summary>Called before bootstrapping begins. This event gives an opportunity for components to stop the bootstrapping process.</summary>
      <param name="projectUniqueName">The project name.</param>
      <param name="target">The target.</param>
      <param name="cancel">Whether or not to cancel.</param>
      <param name="cancelReason">The reason for cancelation.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger">
      <summary>Represents the bootstrapper logger.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger.OutputMessage(System.String)">
      <summary>Outputs the specified message.</summary>
      <param name="message">The message.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperResult">
      <summary>Represents the result of an app container bootstrapper operation.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperResult.Address">
      <summary>Gets the IP address or machine name of the bootstapped target.</summary>
      <returns>The IP address or machine name of the bootstapped target.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperResult.Succeeded">
      <summary>Determines whether the bootstrapper operation succeeded.</summary>
      <returns>True if the bootstrapper operation succeeded, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3">
      <summary>Provides a way to synchronize access to the default MSBuild build manager.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.AcquireBuildResources(Microsoft.VisualStudio.Shell.Interop.VSBUILDMANAGERRESOURCE,System.UInt32@)">
      <summary>Acquires the design-time build resource and/or the UI thread for a build, if they are available.</summary>
      <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
      <param name="fResources">[in] The type of resource to acquire.</param>
      <param name="phCookie">[out] A cookie that identifies the resource, and can be used to release the resource(s).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.BeginDesignTimeBuild">
      <summary>Signals that a modal, design-time build, such as reference resolution, is about to take place.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.ClaimUIThreadForBuild">
      <summary>Attempts to get the UI thread in order to start a build.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.DesignTimeBuildAvailable">
      <summary>Gets an event that is signaled whenever the design-time build resource is available.</summary>
      <returns>The wait handle.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.EndDesignTimeBuild">
      <summary>Signals that a modal, design-time build, such as reference resolution, should end.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.Escape(System.String,System.String@)">
      <summary>Prepares a string to be persisted within MSBuild without evaluation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pwszUnescapedValue">The unescaped value.</param>
      <param name="pbstrEscapedValue">[out] The escaped value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.GetCurrentBatchBuildId(System.UInt32@)">
      <summary>Returns the current batch build ID, or 0 if there is no batch build going on.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBatchId">[out] The batch ID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.GetSolutionConfiguration(System.Object,System.String@)">
      <summary>Gets the solution configuration.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="punkRootProject">The IVsHierarchy project about to be built that will receive the returned solution configuration.</param>
      <param name="pbstrXmlFragment">[out] An XML fragment, interpreted as a string, that should be passed to MSBuild.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.RegisterLogger(System.Int32,System.Object)">
      <summary>Registers a logger for the submission.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="submissionId">The submission for which the logger should be registered.</param>
      <param name="punkLogger">The logger to register. The logger must implement <see cref="T:Microsoft.Build.Framework.ILogger" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.ReleaseBuildResources(System.UInt32)">
      <summary>Releases the resource(s) acquired with AcquireBuildResources. This method deprecates ReleaseUIThreadForBuild and EndDesignTimeBuild.</summary>
      <returns>The HRESULT.</returns>
      <param name="hCookie">The cookie.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.ReleaseUIThreadForBuild">
      <summary>Releases a previously-claimed UI thread.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.SolutionBuildAvailable">
      <summary>Gets an event that is signaled whenever a solution build is not in progress.</summary>
      <returns>The wait handle.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.UIThreadIsAvailableForBuild">
      <summary>Gets an event that is signaled whenever the UI thread is available for a build.</summary>
      <returns>The wait handle.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.Unescape(System.String,System.String@)">
      <summary>Restores a previously escaped string to its original value.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pwszEscapedValue">The escaped value.</param>
      <param name="pbstrUnescapedValue">[out] The unescaped value</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildManagerAccessor3.UnregisterLoggers(System.Int32)">
      <summary>Unregisters all loggers for a given submission.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="submissionId">The submission ID.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReference">
      <summary>Represents a reference to a connected service.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReference.AlreadyReferenced">
      <summary>Determines whether the service has already been referenced.</summary>
      <returns>True if the service has already been referenced, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReference.FullPath">
      <summary>Gets the full path.</summary>
      <returns>The full path.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReference.InstanceIdentity">
      <summary>Gets the instance ID.</summary>
      <returns>The instance ID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReference.Name">
      <summary>Gets the name.</summary>
      <returns>The name.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReference.ProviderIdentity">
      <summary>Gets the provider identity.</summary>
      <returns>The provider identity.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReferenceProviderContext">
      <summary>The context for the connected service reference provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReferenceProviderContext.AddReference(Microsoft.VisualStudio.Shell.Interop.IVsReference)">
      <summary>Adds the specified refrence.</summary>
      <param name="pReference">The reference.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReferenceProviderContext.CreateReference">
      <summary>Creates a reference.</summary>
      <returns>The reference.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReferenceProviderContext.ProjectCapabilities">
      <summary>Gets the project capabilities.</summary>
      <returns>The project capabilities.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReferenceProviderContext.ProviderGuid">
      <summary>Gets the project capabilities.</summary>
      <returns>The project capabilities.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReferenceProviderContext.ReferenceFilterPaths">
      <summary>Gets the reference filter paths.</summary>
      <returns>The reference filter paths.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReferenceProviderContext.References">
      <summary>Gets the references.</summary>
      <returns>The references.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReferenceProviderContext.TargetFrameworkMoniker">
      <summary>Gets the target framework moniker.</summary>
      <returns>The target framework moniker.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReferenceProviderContext.TargetPlatformIdentifier">
      <summary>Gets the target platform identifier.</summary>
      <returns>The target platform identifier.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReferenceProviderContext.TargetPlatformVersion">
      <summary>Gets the target platform version.</summary>
      <returns>The target platform version.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceInstanceReferenceProviderContext.VisualStudioVersion">
      <summary>Gets the Visual Studio version.</summary>
      <returns>The Visual Studio version.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceProperties">
      <summary>Represents connected service properties.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceProperties.Collection">
      <summary>Gets the collection of connected services.</summary>
      <returns>The collection of connected services.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceProperties.GetProperty(System.String)">
      <summary>Gets the specified property.</summary>
      <returns>The value.</returns>
      <param name="szPropertyName">The property name.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceProperties.ServiceIdentity">
      <summary>Gets the service ID.</summary>
      <returns>The service ID.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceProperties.SetProperty(System.String,System.String)">
      <summary>Sets the specified property.</summary>
      <param name="szPropertyName">The property name.</param>
      <param name="szValue">The value.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFileBackup2">
      <summary>This interface should be supported by doc data that should be backed up.  Visual Studio File Recovery backs up all objects in the Running Document Table that support IVsFileBackup2 and have unsaved changes. Implement this interface rather than IVsFileBackup if your component supports asynchronous backups that do not run on the UI thread.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileBackup2.BackupFileAsync(System.String)">
      <summary>Backs up the file asynchronously.</summary>
      <returns>The asynchronous task.</returns>
      <param name="szBackupFileName">The backup file name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileBackup2.HasChangedSinceLastBackup">
      <summary>Determines whether the file has changed since the last backup.</summary>
      <returns>True if it has changed, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLongIdleEvents">
      <summary>Implemented by subscribers interested in receiving long idle notifications.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLongIdleEvents.OnEnterIdle(System.UInt32)">
      <summary>Occurs when the shell enters an idle state.</summary>
      <param name="reason">The shell entered long idle and the timeout specified at registration has passed without user input, or there was an event that caused the shell to enter long idle state immediately.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLongIdleEvents.OnExitIdle">
      <summary>Occurs when the user has made some keyboard or mouse input that caused the shell to exit the long idle state.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsLongIdleManager">
      <summary>Provides methods to allow subscribers to receive long idle events.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLongIdleManager.AdviseLongIdleEvents(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsLongIdleEvents)">
      <summary>Subscribes to long idle events.</summary>
      <returns>The returned identifier of the sink.</returns>
      <param name="eventSink">The event sink that is called for entering or exiting long idle state</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsLongIdleManager.UnadviseLongIdleEvents(System.UInt32)">
      <summary>Unsubscribes from long idle events.</summary>
      <param name="cookie">The cookie returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLongIdleManager.AdviseLongIdleEvents(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsLongIdleEvents)" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPaneNoPump">
      <summary>Implemented by the solution-wrapper to the OutputWindow tool window. It is not guaranteed to be implemented by all COM objects that implement IVsOutputWindowPane, so clients that need pump-free writing to the output window should try to cast to this interface and use it if the cast succeeds, but be prepared to fallback to calling IVsOutputWindowPane::OutputString when the cast fails. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPaneNoPump.OutputStringNoPump(System.String)">
      <summary>Prints text to the output window without pushing a message pump.</summary>
      <param name="pszOutputString">The string.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPackageLoadEvents">
      <summary>Represents package load events.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPackageLoadEvents.OnPackageLoaded(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsPackage)">
      <summary>Occurs when the package is loaded.</summary>
      <param name="packageGuid">The GUID of the package.</param>
      <param name="package">The package.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistConnectedServices">
      <summary>Implemented by project system that supports ConnectedServices property persistance. Use IVsHierarchy.GetProperty(VSHPROPID_ConnectedServicesPersistence, ...) to get IVsPersistConnectedServices from the project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistConnectedServices.Add(System.String,System.UInt32,System.String[],System.String[])">
      <summary>Adds a connected service.</summary>
      <returns>The connected service properties.</returns>
      <param name="szServiceIdentity">The ID of the service.</param>
      <param name="dwCountMetadata">The number of properties.</param>
      <param name="szProperties">The properties.</param>
      <param name="szValues">The values.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPersistConnectedServices.Count">
      <summary>Gets the number of services.</summary>
      <returns>The number of services.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistConnectedServices.GetConnectedService(System.String)">
      <summary>Gets the specified service.</summary>
      <returns>The connected service.</returns>
      <param name="szServiceIdentity">The service ID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistConnectedServices.GetConnectedServices(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsConnectedServiceProperties[])">
      <summary>Gets the specified services.</summary>
      <returns>The number of services.</returns>
      <param name="dwMaxReferences">The references. </param>
      <param name="rgpServices">The services.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPersistConnectedServices.Project">
      <summary>Gets the project.</summary>
      <returns>The project.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistConnectedServices.Remove(System.String)">
      <summary>Removes the specified service.</summary>
      <param name="szServiceIdentity">The service ID.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectAcquisitionSetupDriver">
      <summary>Represents the setup driver.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectAcquisitionSetupDriver.Install(System.Object)">
      <summary>Installs the specified components.</summary>
      <returns>The HRESULT.</returns>
      <param name="components">The components.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectAcquisitionSetupDriver.SetupDriverGuid">
      <summary>The GUID of the setup driver.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectMRU">
      <summary>Provides methods for registering most recently used (MRU) entries.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectMRU.RegisterProjectMRU(System.String,System.String,System.String,System.String,System.Guid@)">
      <summary>Register additional information for a Project MRU entry. Only the first entry in the MRU list can be modified.</summary>
      <param name="szLocalPath">The local path to the project/solution.</param>
      <param name="szProviderString">A provider-specific string, for example a server path.</param>
      <param name="szDisplayText">Additional text that will be displayed in the Start Page MRU list for the project/solution.</param>
      <param name="szToolTipDisplayText">An additional line of text that will be displayed in the Start Page MRU tooltip for the project/solution.</param>
      <param name="providerId">Id of the source control provider that is calling the method.&lt;/</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetChange">
      <summary>Represents the project target change.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetChange.CurrentTargetId">
      <summary>Gets the target ID.</summary>
      <returns>The target ID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetChange.NewTargetId">
      <summary>Gets the new target ID.</summary>
      <returns>The new target ID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetChange.ReloadProjectOnSuccess">
      <summary>Determines whether to reload the project if retargeting was successful.</summary>
      <returns>true to reload the project if retargeting was successful, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetChange.UnloadOnCancel">
      <summary>Determines whether to unload if the retarget was canceled.</summary>
      <returns>true to unload if the retarget was canceled, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetChange.UnloadOnFailure">
      <summary>Determines whether to unload the project if retargeting fails.</summary>
      <returns>true to unload the project if retargeting fails, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetDescription">
      <summary>Represents the project target description.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetDescription.DisplayName">
      <summary>Gets the display name.</summary>
      <returns>The display name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetDescription.GetProperty(System.UInt32)">
      <summary>Gets the specified property.</summary>
      <returns>The value.</returns>
      <param name="prop">The ID of the property.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetDescription.Order">
      <summary>Gets the order of the target groups.</summary>
      <returns>The order of the target groups.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetDescription.Supported">
      <summary>Determines whether or not it is supported.</summary>
      <returns>True if it is supported, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetDescription.TargetId">
      <summary>Gets the target ID.</summary>
      <returns>The target ID.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertiesInfo">
      <summary>Represents properties information.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPropertiesInfo.IsTransmittable(System.Int32)">
      <summary>Determines whether the property with the specified DISPID can be transmitted and applied across machines.</summary>
      <returns>True if it can be transmitted, otherwise false.</returns>
      <param name="id">The dispatch ID</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRetargetProject">
      <summary>Provides methods for retargeting projects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRetargetProject.CheckForRetarget(System.UInt32)">
      <summary>Determines whether retargeting is necessary.</summary>
      <returns>null means no retargeting is required  or offered by the project.</returns>
      <param name="dwFlags">The flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRetargetProject.GetAffectedFilesList(Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetChange)">
      <summary>Used to create a single unified checkout list.</summary>
      <returns>The documents.</returns>
      <param name="target">The target.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRetargetProject.Retarget(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetChange,System.String)">
      <summary>Execute the retargeting.</summary>
      <param name="logger">The logger. Pass in the  IVsOutputWindowPane interface.</param>
      <param name="dwFlags">The flags.</param>
      <param name="target">The target.</param>
      <param name="szProjectBackupLoaction">The backup location.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRetargetProjectAsync">
      <summary>Provides methods for retargeting projects asynchronously.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRetargetProjectAsync.CheckForRetargetAsync(System.UInt32)">
      <returns>The project target, or null if no retargeting is required / offered by project. </returns>
      <param name="dwFlags">The flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRetargetProjectAsync.GetAffectedFilesListAsync(Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetChange)">
      <summary>Used to create a single unified checkout list.</summary>
      <returns>The documents.</returns>
      <param name="target">The target.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRetargetProjectAsync.RetargetAsync(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetChange,System.String)">
      <summary>Execute the retargeting.</summary>
      <returns>The asynchronous task. The result from IVsTask is ignored. Only the HRESULT matters to notify success or failure.</returns>
      <param name="logger">The logger. Pass in the  IVsOutputWindowPane interface.</param>
      <param name="dwFlags">The flags.</param>
      <param name="target">The target.</param>
      <param name="szProjectBackupLoaction">The backup location.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4">
      <summary>Provides methods for dealing with documents in the Running Document Table.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.GetDocumentCookie(System.String)">
      <summary>This is functionally identical to calling IVsRunningDocumentTable.FindAndLockDocument with RDT_NoLock and requesting only the cookie, but it is easier to consume from managed code. In managed code it is impossible to request the flags without also requesting all of the other information, and requesting all of the other information can result in the potentially unnecessary initialization of an RDT_PendingInitialization document.</summary>
      <returns>The cookie.</returns>
      <param name="moniker">The moniker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.GetDocumentData(System.UInt32)">
      <summary>This is functionally identical to calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetDocumentInfo(System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@)" /> and requesting only the document data, but this method easier to consume from managed code.There are two pending states for a document:<see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS4.RDT_PendingHierarchyInitialization" />: The project that owns the document hasn’t yet been loaded. This can happen only during asynchronous solution load (ASL). As individual projects are loaded, the documents owned by the projects are updated to remove the RDT_PendingHierarchyInitialization flag. By the time the solution is fully loaded, no documents are in this state.<see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS4.RDT_PendingInitialization" />: The document data hasn’t been loaded, and the view hasn’t been created. A document in this state may or may not also have RDT_PendingHierarchyInitialization, but a document with RDT_PendingHierarchyInitialization always has RDT_PendingInitialization. Documents in this state are referred to as lazy or stub documents. This method causes a lazy document to be loaded immediately, so by the time it returns, the document no longer has the RDT_PendingInitialization flag. You should first call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.GetDocumentFlags(System.UInt32)" /> and call GetDocumentData only if the document doesn’t have RDT_PendingInitialization among its flags. You can be notified that the document has been loaded by subscribing to running document table events and looking for the <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB3.RDTA_DocumentInitialized" /> flag in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterAttributeChange(System.UInt32,System.UInt32)" /> or <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnAfterAttributeChangeEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)" />.</summary>
      <returns>The document data.</returns>
      <param name="cookie">The document cookie.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.GetDocumentEditLockCount(System.UInt32)">
      <summary>This is functionally identical to calling IVsRunningDocumentTable.GetDocumentInfo and requesting only the edit lock count, but it is easier to consume from managed code. In managed code it is impossible to request the flags without also requesting all of the other information, and requesting all of the other information can result in the potentially unnecessary initialization of an RDT_PendingInitialization document.</summary>
      <returns>The number of outstanding edit locks for the document.</returns>
      <param name="cookie">The document cookie.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.GetDocumentFlags(System.UInt32)">
      <summary>This is functionally identical to calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetDocumentInfo(System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@)" />  and requesting only the flags, but it is easier to consume from managed code. In managed code it is impossible to request the flags without also requesting all information, and requesting all of the other information can result in the potentially unnecessary initialization of an RDT_PendingInitialization document.</summary>
      <returns>The flags.</returns>
      <param name="cookie">The cookie.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.GetDocumentHierarchyItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)">
      <summary>This is functionally identical to calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetDocumentInfo(System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@)" /> and requesting only the document data, but this method easier to consume from managed code.There are two pending states for a document:<see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS4.RDT_PendingHierarchyInitialization" />: The project that owns the document hasn’t yet been loaded. This can happen only during asynchronous solution load (ASL). As individual projects are loaded, the documents owned by the projects are updated to remove the RDT_PendingHierarchyInitialization flag. By the time the solution is fully loaded, no documents are in this state.<see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS4.RDT_PendingInitialization" />: The document data hasn’t been loaded, and the view hasn’t been created. A document in this state may or may not also have RDT_PendingHierarchyInitialization, but a document with RDT_PendingHierarchyInitialization always has RDT_PendingInitialization. Documents in this state are referred to as lazy or stub documents. This method causes the project that owns a lazy document to be loaded immediately, rather than waiting for it to be loaded normally, so by the time the method returns, the document no longer has RDT_PendingHierarchyInitialization. It doesn’t cause the document itself to be loaded.You should first call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.GetDocumentFlags(System.UInt32)" /> and call GetDocumentHierarchyItem only if the document doesn’t have RDT_PendingInitialization among its flags. You can be notified that the document has been loaded by subscribing to running document table events and looking for the <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB3.RDTA_DocumentInitialized" /> flag in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterAttributeChange(System.UInt32,System.UInt32)" /> or <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnAfterAttributeChangeEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)" />.</summary>
      <param name="cookie">The document cookie.</param>
      <param name="hierarchy">[out] The project hierarchy.</param>
      <param name="itemID">[out] The item ID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.GetDocumentMoniker(System.UInt32)">
      <summary>This is functionally identical to calling IVsRunningDocumentTable.GetDocumentInfo and requesting only the moniker, but it is easier to consume from managed code. In managed code it is impossible to request the flags without also requesting all of the other information, and requesting all of the other information can result in the potentially unnecessary initialization of an RDT_PendingInitialization document.</summary>
      <returns>The moniker.</returns>
      <param name="cookie">The document cookie.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.GetDocumentProjectGuid(System.UInt32)">
      <summary>Returns the GUID for the project owning the document</summary>
      <returns>The GUID.</returns>
      <param name="cookie">The document cookie.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.GetDocumentReadLockCount(System.UInt32)">
      <summary>This is functionally identical to calling IVsRunningDocumentTable.GetDocumentInfo and requesting only the read lock count, but it is easier to consume from managed code. In managed code it is impossible to request the flags without also requesting all of the other information, and requesting all of the other information can result in the potentially unnecessary initialization of an RDT_PendingInitialization document.</summary>
      <returns>The number of outstanding read locks for the document.</returns>
      <param name="cookie">The cookie.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.GetRelatedSaveTreeItems(System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM[])">
      <summary>Retrieves the related save tree items for a document.</summary>
      <returns>The actual number of related save tree items that was retrieved.</returns>
      <param name="cookie">[in] Document from which to get the related save tree items.</param>
      <param name="grfSave">[in] Save options for the document in the running document table (RDT).</param>
      <param name="celt">[in] Size the related save tree items.</param>
      <param name="rgSaveTreeItems">[out, size_is(celt), length_is(*pcActual)] Array that contains the save options for the tree-view item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.IsCookieValid(System.UInt32)">
      <summary>Determines whether the given cookie exists in the RDT.</summary>
      <returns>True if the cookie exists in the RDT, otherwise false.</returns>
      <param name="cookie">The cookie.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.IsDocumentDirty(System.UInt32)">
      <summary>Indicates whether the document has changed since the last save.</summary>
      <returns>true if the document has changed, or false if the document has not changed since the last save.</returns>
      <param name="cookie">[in] The document to check.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.IsDocumentReadOnly(System.UInt32)">
      <summary>Indicates whether the document is a read-only document.</summary>
      <returns>true if the document can only be read, or false if information can be written to the document.</returns>
      <param name="cookie">[in] The document to check.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.IsMonikerValid(System.String)">
      <summary>Determines whether the given moniker exists in the RDT</summary>
      <returns>True if the moniker is valid, otherwise false.</returns>
      <param name="moniker">The moniker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.NotifyDocumentChangedEx(System.UInt32,System.UInt32)">
      <summary>Notifies the client when changes are made to the document.</summary>
      <param name="cookie">[in] The document that is changed.</param>
      <param name="attributes">[in] The new attributes for the document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.UpdateDirtyState(System.UInt32)">
      <summary>Updates the status of the dirty state.</summary>
      <param name="cookie">[in] The document to check.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.UpdateReadOnlyState(System.UInt32)">
      <summary>Updates the document’s read-only state.</summary>
      <param name="cookie">[in] The document to check.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsScriptJmcProjectControl">
      <summary>This interface is implemented by project systems that are able to classify Script source documents as user code or non-user code.  This is the element type returned for VSHPROPID_ScriptJmcProjectControl.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsScriptJmcProjectControl.EvalDefaultCodeType"></member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsScriptJmcProjectControl.FunctionDefaultCodeType"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsScriptJmcProjectControl.GetUserCodeSourceType(System.String)">
      <summary>Classify the source file as user code, library code or unrelated code.</summary>
      <returns>The code type.</returns>
      <param name="sourceUrl">The source URL.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsScriptJmcProjectControl.ScriptBlockDefaultCodeType"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsScriptJmcUserSettingsProvider">
      <summary>The script user settings provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsScriptJmcUserSettingsProvider.CreateJsonUserSettingsControl(System.String,System.String)">
      <summary>Create JSON user settings.</summary>
      <returns>The HRESULT.</returns>
      <param name="projectRoot">The project root.</param>
      <param name="settingsFile">The settings file.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStorageContainer">
      <summary>Provides settings functionality.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStorageContainer.Clear">
      <summary>Clears the container.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStorageContainer.EnumKeys(Microsoft.VisualStudio.OLE.Interop.IEnumString@)">
      <summary>Enumerates only the keys at the top level (not in subcollections). IEnumString.Next() returns LPOLESTRs, which must be freed by the caller usingCoTaskMemFree.</summary>
      <param name="ppEnum">[out] The key enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStorageContainer.EnumSubkeys(System.String[],System.Int32,Microsoft.VisualStudio.OLE.Interop.IEnumString@)">
      <summary>Enumerates the subkeys of the parent keys.</summary>
      <param name="parentKeys">The parent keys.</param>
      <param name="parentKeyCount">The number of parent keys.</param>
      <param name="ppEnum">[out] The key enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStorageContainer.GetMultiKeyValue(System.String[],System.Int32)">
      <summary>Gets a multi-key value.</summary>
      <returns>The value.</returns>
      <param name="keys">The keys.</param>
      <param name="keyCount">The number of keys.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStorageContainer.GetValue(System.String)">
      <summary>Gets a value for the specified key.</summary>
      <returns>The value.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStorageContainer.RemoveMultiKeyValue(System.String[],System.Int32)">
      <summary>Removes the specified key values.</summary>
      <param name="keys">The keys.</param>
      <param name="keyCount">The number of keys.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStorageContainer.RemoveValue(System.String)">
      <summary>Removes the value for the specified key.</summary>
      <param name="key">The key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStorageContainer.SetMultiKeyValue(System.String[],System.UInt32,System.String)">
      <summary>Set multi-key values.</summary>
      <param name="keys">The keys.</param>
      <param name="keyCount">The number of keys.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStorageContainer.SetValue(System.String,System.String)">
      <summary>Sets a value for the specified key.</summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsShell6">
      <summary>Provides package load functionality.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell6.AdvisePackageLoadEvents(Microsoft.VisualStudio.Shell.Interop.IVsPackageLoadEvents)">
      <summary>Subscribes to package load events.</summary>
      <returns>The cookie.</returns>
      <param name="eventSink">The event sink.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell6.CreatePackageExtension(System.Guid@,System.Guid@,System.Guid@)">
      <summary>Loads, if necessary, the specified package and creates an instance of the given type of extension point using <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackageExtensionProvider" />.</summary>
      <returns>The requested extension point instance.</returns>
      <param name="Package">[in] Package containing the desired extension.</param>
      <param name="extensionPoint">[in] The type of extension point.</param>
      <param name="instance">[in] The instance identifier of the requested extension point.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell6.LoadPackageWithContext(System.Guid@,System.Int32,System.Guid@)">
      <summary>Loads a package. If the package is not already loaded, this method provides additional diagnostic information about the reason for loading. Negative reason codes are reserved by the environment.</summary>
      <returns>The loaded package.</returns>
      <param name="packageGuid">[in] GUID of the package to load.</param>
      <param name="reason">[in] The reason for loading the package.</param>
      <param name="context">[in] Optional context information associated with the reason.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell6.NotifyExtensionSettingsChanged">
      <summary>For extenders to notify when the settings have changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell6.UnadvisePackageLoadEvents(System.UInt32)">
      <summary>Unsubscribes from package load events.</summary>
      <param name="cookie">The event cookie.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsThemeThumbnailProvider">
      <summary>Provides a method to get a theme thumbnail.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThemeThumbnailProvider.GetThemeThumbnail(System.Guid)">
      <summary>/ Returns a thumbnail image to use for the given theme. The thumbnail's type should be VSUI_TYPE_BITMAP</summary>
      <returns>The HRESULT.</returns>
      <param name="themeID">The theme ID.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2">
      <summary>Provides methods for retargeting projects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.AdviseTrackBatchRetargetingEvents(Microsoft.VisualStudio.Shell.Interop.IVsTrackBatchRetargetingEvents,System.UInt32@)">
      <summary>Subscribes to TrackBatchProjectRetargeting evesnts.</summary>
      <returns>The HRESULT.</returns>
      <param name="pEventSink">The event sink.</param>
      <param name="pdwCookie">[out] The cookie.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.AdviseTrackProjectRetargetingEvents(Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargetingEvents,System.UInt32@)">
      <summary>Subscribes to TrackProjectRetargeting events.</summary>
      <returns>The HRESULT.</returns>
      <param name="pEventSink">The event sink.</param>
      <param name="pdwCookie">The cookie.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.BatchRetargetProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.Boolean)">
      <summary>Performs a batch retargeting of the specified project.</summary>
      <returns>The HRESULT.</returns>
      <param name="pHier">The project hierarchy.</param>
      <param name="newTargetFramework">The new target framework.</param>
      <param name="unloadProjectIfErrorOrCancel">true to unload the project if there is an error, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.BeginRetargetingBatch">
      <summary>Starts batch retargeting.</summary>
      <returns>The HRESULT.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.BeginRetargetingBatchEx(System.UInt32)">
      <summary>Starts retargeting with the specified flags.</summary>
      <returns>The HRESULT.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.CheckForProjectRetarget(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Checks for projects to retarget.</summary>
      <returns>The HRESULT.</returns>
      <param name="dwFlags">The flags.</param>
      <param name="pHier">The project hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.CheckSolutionForRetarget(System.UInt32)">
      <summary>Checks the solution for retargeting.</summary>
      <returns>The HRESULT.</returns>
      <param name="dwFlags">The flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.EndRetargetingBatch">
      <summary>Finish the batch retargeting.</summary>
      <returns>The HRESULT.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.GetProjectTarget(System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetDescription@)">
      <summary>Gets the specified project target.</summary>
      <returns>The HRESULT.</returns>
      <param name="TargetId">The target ID.</param>
      <param name="pTarget">[out] The project target.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.GetSetupDriver(System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsProjectAcquisitionSetupDriver@)">
      <summary>Gets the specified setup driver.</summary>
      <returns>The HRESULT.</returns>
      <param name="driverId">The driver ID.</param>
      <param name="pDriver">[out] The driver.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.OnSetTargetFramework(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsSetTargetFrameworkWorkerCallback,System.Boolean)">
      <summary>Occurs when the target framework is sest.</summary>
      <returns>The HRESULT.</returns>
      <param name="pHier">The project hierarchy.</param>
      <param name="currentTargetFramework">The current target framework.</param>
      <param name="newTargetFramework">The new target framework.</param>
      <param name="pWorkerCallback">The callback.</param>
      <param name="ReloadProject">true to reload the project after retargeting, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.PromptForProjectRetarget(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetChange,System.String)">
      <summary>Prompts for retargeting.</summary>
      <returns>The HRESULT.</returns>
      <param name="pHier">The project hierarchy.</param>
      <param name="pTarget">The target.</param>
      <param name="szDescription">The description.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.RegisterProjectTarget(Microsoft.VisualStudio.Shell.Interop.IVsProjectTargetDescription)">
      <summary>Registers the project target.</summary>
      <returns>The HRESULT.</returns>
      <param name="pTarget">The target.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.RegisterSetupDriver(System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsProjectAcquisitionSetupDriver)">
      <summary>Registers the setup driver.</summary>
      <returns>The HRESULT.</returns>
      <param name="driverId">The driver ID.</param>
      <param name="pDriver">The driver.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.UnadviseTrackBatchRetargetingEvents(System.UInt32)">
      <summary>Unsubscribes from TrackBatchRetargeting events.</summary>
      <returns>The HRESULT.</returns>
      <param name="dwCookie">The subscription cookie.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.UnadviseTrackProjectRetargetingEvents(System.UInt32)">
      <summary>Unsubscribes from TrackProjectRetargeting </summary>
      <returns>The HRESULT.</returns>
      <param name="dwCookie">The subscription cookie.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.UnregisterProjectTarget(System.Guid)">
      <summary>Unregisters the project target.</summary>
      <returns>The HRESULT.</returns>
      <param name="TargetId">The target ID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectRetargeting2.UnregisterSetupDriver(System.Guid)">
      <summary>Unregisters the setup driver.</summary>
      <returns>The HRESULT.</returns>
      <param name="driverId">The driver ID.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyNativeWindow">
      <summary>Provides methods for native windows.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyNativeWindow.SetTreeRedraw(System.Boolean)">
      <summary>Sets whether the tree view should enable or disable redraw.</summary>
      <param name="fEnabled">true if enabled, otherwise false.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShell6">
      <summary>Provides shell functionality.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell6.CreateThemedImageList(System.IntPtr,System.UInt32)">
      <summary>Creates a themed image list.  Themed image lists attempt to transform the images to target a given background. The caller is responsible for calling ImageList_Destroy to delete the imagelist. HANDLE represents an HIMAGELIST, but including commctrl.h can produce build issues for projects that would not otherwise support common controls.</summary>
      <returns>The HRESULT.</returns>
      <param name="hImageList">The image list.</param>
      <param name="crBackground">The background color.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell6.EnumKeyBindingScopes">
      <summary>Retrieves a collection of the available key binding scopes.</summary>
      <returns>The available key binding scopes.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell6.GetKeyBindingScope(System.Guid@)">
      <summary>Retrieves the name of a key binding scope.</summary>
      <returns>The name of the key binding scope.</returns>
      <param name="keyBindingScope">[in] The key binding scope whose name is returned. Valid key binding scopes are the registered editor's GUIDs, and guidVSStd97 is the Global scope.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell6.GetOpenFileNameViaDlgEx2(Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW[],System.String,System.String)">
      <summary>Brings up the File Open dialog box to obtain a specified open file.</summary>
      <param name="openFileName">[in, out] A <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW" /> structure that contains information used to initialize the File Open dialog box. When this method returns, this structure contains information about the user's file selection.</param>
      <param name="HelpTopic">[in] A string containing the help topic.</param>
      <param name="openButtonLabel">[in] The caption of the Open button in the File Open dialog displayed during the call. This parameter overrides the default Open name of the button.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell6.GetThemedColor(System.Guid@,System.String,System.UInt32)">
      <summary>Gets the current RGBA value of a themed color. This method fails if the color does not exist.</summary>
      <returns>The RGBA value of the themed color.</returns>
      <param name="colorCategory">[in] The color category of the themed color.</param>
      <param name="colorName">[in] The color name of the themed color.</param>
      <param name="colorType">[in] The color type of the themed color.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell6.SetFixedThemeColors(System.IntPtr)">
      <summary>For a window previously themed by calling ThemeWindow, ensures that the window uses only colors from a fixed VS-theme, that are suitable when the themed window is displayed as child of an unthemed window (e.g. in a dialog), such that the themed window doesn't look 'out-of-place'. Other visual characteristics of the theme are kept (e.g. expander shapes in treeview, lines, control styles, etc), just the window's colors won't change when the appid theme is changed. This function should be called for themed controls that are children of unthemed dialogs.</summary>
      <param name="hwnd">The window</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell6.ThemeDIBits(System.UInt32,System.Byte@,System.UInt32,System.UInt32,System.Boolean,System.UInt32)">
      <summary>Applies theming to BGRA32 device-independent bitmap bits. The luminosity of the image is transformed so that the constant "halo" luminosity blends in with the background.  This has the effect of eliminating the halo visually.  The "halo" luminosity is an immutable constant, and is not calculated from the input image. Images which contain cyan (#00FFFF) in their top-right pixel are not inverted.  Instead, the top-right pixel is cleared (RGBA are all set to 0) and S_OK is returned without otherwise modifying the image.</summary>
      <param name="dwBitmapLength">The bitmap length.</param>
      <param name="pBitmap">The bitmap</param>
      <param name="dwPixelWidth">The width in pixels.</param>
      <param name="dwPixelHeight">The height in pixels.</param>
      <param name="fIsTopDownBitmap">The bitmap.</param>
      <param name="crBackground">The background color.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell6.ThemeWindow(System.IntPtr)">
      <summary>Apply the VS-theme to the specified window, for supported window classes.</summary>
      <returns>The HRESULT.</returns>
      <param name="hwnd">The handle of the window.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShellArrangeWindows">
      <summary>Provides methods for computing window size changes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellArrangeWindows.Arrange(Microsoft.VisualStudio.Shell.Interop.VSArrangeWindowInfo[],System.Int32,Microsoft.VisualStudio.OLE.Interop.SIZE)">
      <summary>Applies a size change to the windows described in the <paramref name="infos" /> array. The size parameter is commonly returned from ComputeWindowSizeChange.</summary>
      <param name="infos">The windows to arrange.</param>
      <param name="Count">The number of windows to arrange.</param>
      <param name="size">The size of the change.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellArrangeWindows.ComputeWindowSizeChange(System.IntPtr,Microsoft.VisualStudio.Shell.Interop.WINDOWPOS[])">
      <summary>Computes the difference between a window's current size and the new size described in newPos. This function is typically called when WM_WINDOWPOSCHANGING is received, in preparation for calling CArrangeWindowHelper::Arrange.</summary>
      <returns>The HRESULT.</returns>
      <param name="hwnd">The handle for the window.</param>
      <param name="newPos">The new positions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument4.OpenDocumentViaProject2(System.String,System.Guid@,System.Boolean,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@)">
      <summary>Finds an appropriate project to open the document.</summary>
      <returns>The HRESULT.</returns>
      <param name="pszMkDocument">in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="rguidLogicalView">in] Unique identifier of the logical view. If the editor implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on the document view object, then the value passed into the <paramref name="rguidLogicalView" /> parameter determines which view is activated when the editor window is shown, when the editor is instantiated. By specifying the logical view GUID, you can request the specific view that matches the reason you are requesting the view. For example, specify <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging" /> to get the view appropriate for debugging, or <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" /> to get the view appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).</param>
      <param name="fSupportExternalItems">True if the project supports external items, otherwise false.</param>
      <param name="ppSP">[out] Pointer to the IServiceProvideroledbinterfaces_implemented_by_the_provider interface.</param>
      <param name="ppHier">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface of the project that can open the document.</param>
      <param name="pitemid">[out] Pointer to the hierarchy item identifier of the document in the project. For more information see VSITEMID.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUserSettings2">
      <summary>Provides help with importing and exporting settings.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserSettings2.ExportSettings(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter,Microsoft.VisualStudio.Shell.Interop.IVsSettingsStorageContainer)">
      <summary>Exports the settings.</summary>
      <param name="category">The GUID of the settings category.</param>
      <param name="settingsWriter">The settings writer.</param>
      <param name="storageContainer">The <paramref name="storageContainer" /> contains unrecognized data stored during the last import of this category. The implementation should merge that data back into the values being exported so that round-tripping between different versions can occur without data loss. This argument is optional (i.e. it may be null).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserSettings2.ImportSettings(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsSettingsStorageContainer)">
      <summary>Imports the settings.</summary>
      <param name="category">The GUID of the settings category.</param>
      <param name="settingsReader">The settings reader.</param>
      <param name="flags">The flags.</param>
      <param name="storageContainer">The <paramref name="storageContainer" /> contains unrecognized data stored during the last import of this category. The implementation should merge that data back into the values being exported so that round-tripping between different versions can occur without data loss. This argument is optional (i.e. it may be null).</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame4">
      <summary>Implemented by the Visual Studio Environment on <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame4" />objects for tool windows and document windows. This interface may be retrieved by QueryInterface from an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> pointer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame4.GetWindowScreenRect(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary> Gets the frame's position, in screen coordinates.  This rectangle represents the screen coordinates of the content portion of the tool window, measured in pixels. This area does not include the title region, but includes any toolbars hosted by the window. This function behaves the same regardless of the dock state of the window (floating, docked, MDI). The isOnScreen return value will be set to true if the frame's position and size could be accurately calculated, or false if the frame's position or size values could not be accurately calculated.</summary>
      <returns>The HRESULT.</returns>
      <param name="screenLeft">The left screen coordinate.</param>
      <param name="screenTop">The top screen coordinate.</param>
      <param name="screenWidth">The screen width coordinate.</param>
      <param name="screenHeight">The screen height coordinate.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5">
      <summary>Extracts information from XML documentation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetAssociatedCapabilities">
      <summary>Gets the list of associated capabilities from the XML documentation (&lt;capability&gt; tags).</summary>
      <returns>The list of associated capabilities.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetCompletionListText(System.String@)">
      <summary>Gets the text of a completion list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCompletionList">[out] The completion list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetCompletionListTextAt(System.Int32,System.String@)">
      <summary>Gets a value from a completion list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iParam">[in] The position of the list element.</param>
      <param name="pbstrCompletionList">[out] The value of the list element.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetDeprecation">
      <summary>Gets the deprecation data from the xml documentation (&lt;deprecated&gt; tag).</summary>
      <returns>If the tag doesn't exist, the function returns S_FALSE.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetExceptionCount(System.Int32@)">
      <summary>Gets the number of exceptions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piExceptions">[out] The number of exceptions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetExceptionTextAt(System.Int32,System.String@,System.String@)">
      <summary>Gets the exception text from the specified location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iException">[in] The position of the exception in the collection.</param>
      <param name="pbstrType">[out] The type of the exception.</param>
      <param name="pbstrText">[out] The text of the exception.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetFilterPriority(System.Int32@)">
      <summary>Gets the priority of a filter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piFilterPriority">[out] The filter priority.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetParamCount(System.Int32@)">
      <summary>Gets the number of parameters.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piParams">[out] The number of parameters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetParamTextAt(System.Int32,System.String@,System.String@)">
      <summary>Gets the text describing a specific parameter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iParam">[in] The position of the parameter in the signature.</param>
      <param name="pbstrName">[out] The name of the parameter.</param>
      <param name="pbstrText">[out] The text describing the parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetPermissionSet(System.String@)">
      <summary>Gets the permission set.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrPermissionSetXML">[out] The permission set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetRemarksText(System.String@)">
      <summary>Gets remarks for an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrRemarks">[out] The remarks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetReturnsText(System.String@)">
      <summary>Gets the description of return values for a method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrReturns">[out] The return value description.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetSummaryText(System.String@)">
      <summary>Gets the summary text for an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrSummary">[in] The summary text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetTypeParamCount(System.Int32@)">
      <summary>Gets the number of parameters for a type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piTypeParams">[out] The number of parameters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.GetTypeParamTextAt(System.Int32,System.String@,System.String@)">
      <summary>Gets the type of a specific parameter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTypeParam">[in] The position of the parameter in the collection.</param>
      <param name="pbstrName">[out] The name of the parameter.</param>
      <param name="pbstrText">[out] The type name of the parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData5.SetOptions(System.UInt32)">
      <summary>Sets the specified options for XML member data elements.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="options">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.__XMLMEMBERDATA_OPTIONS" /> enumeration that specifies the options.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataDeprecation">
      <summary>Provides information for deprecating XML members.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataDeprecation.Description">
      <summary>Gets the description.</summary>
      <returns>The description.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataDeprecation.Type">
      <summary>Gets the type of the member.</summary>
      <returns>The type of the member.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsLongIdleManager">
      <summary>Provides <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLongIdleManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsProjectMRU">
      <summary>Provides <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectMRU" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSArrangeWindowInfo">
      <summary>Specifies how a window is to be arranged.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSArrangeWindowInfo.flags">
      <summary>Flags specifying the window arrangements. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSArrangeWindowFlags" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSArrangeWindowInfo.hwnd">
      <summary>Pointer to the window to be arranged (typically a dialog control).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsScriptJmcCodeType">
      <summary>Represents the type of code.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsScriptJmcCodeType.SJMC_LIBRARYCODE">
      <summary>The code belongs to a library that may interact with user code.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsScriptJmcCodeType.SJMC_UNRELATEDCODE">
      <summary>The code is not related to any user code.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsScriptJmcCodeType.SJMC_UNSURE">
      <summary>The project is not aware of this code.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsScriptJmcCodeType.SJMC_USERCODE">
      <summary>User code.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.WINDOWPOS">
      <summary>Represents the position of a window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.WINDOWPOS.cx">
      <summary>The x coordinate relative to x.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.WINDOWPOS.cy">
      <summary>The y coordinate relative to y.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.WINDOWPOS.flags">
      <summary>The flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.WINDOWPOS.hwnd">
      <summary>The window handler.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.WINDOWPOS.hwndInsertAfter">
      <summary>The other window handle.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.WINDOWPOS.x">
      <summary>The x coordinate.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.WINDOWPOS.y">
      <summary>The y coordinate.</summary>
    </member>
  </members>
</doc>