<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Validation</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Strings.Argument_EmptyArray">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; must contain at least one element..
            </summary>
        </member>
        <member name="P:Microsoft.Strings.Argument_EmptyGuid">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot be an empty guid..
            </summary>
        </member>
        <member name="P:Microsoft.Strings.Argument_EmptyString">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot be an empty string (&quot;&quot;) or start with the null character..
            </summary>
        </member>
        <member name="P:Microsoft.Strings.Argument_NullElement">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot contain a null (Nothing in Visual Basic) element..
            </summary>
        </member>
        <member name="P:Microsoft.Strings.Argument_Whitespace">
            <summary>
              Looks up a localized string similar to The parameter &quot;{0}&quot; cannot consist entirely of white space characters..
            </summary>
        </member>
        <member name="P:Microsoft.Strings.InternalExceptionMessage">
            <summary>
              Looks up a localized string similar to An internal error occurred. Please contact Microsoft Product Support Services..
            </summary>
        </member>
        <member name="P:Microsoft.Strings.ServiceMissing">
            <summary>
              Looks up a localized string similar to Cannot find an instance of the {0} service..
            </summary>
        </member>
        <member name="T:Microsoft.Verify">
            <summary>
            Common runtime checks that throw exceptions upon failure.
            </summary>
            <summary>
            Common runtime checks that throw exceptions upon failure.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.HResult(System.Int32,System.Boolean)">
            <summary>
            Throws an exception if the given value is negative.
            </summary>
            <param name="hresult">The HRESULT corresponding to the desired exception.</param>
            <param name="ignorePreviousComCalls">If true, prevents <c>ThrowExceptionForHR</c> from returning an exception from a previous COM call and instead always use the HRESULT specified.</param>
            <remarks>
            No exception is thrown for S_FALSE.
            </remarks>
        </member>
        <member name="M:Microsoft.Verify.Operation(System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.Operation(System.Boolean,System.String,System.Object)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.Operation(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.Operation(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.OperationWithHelp(System.Boolean,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.FailOperation(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <returns>
            Nothing.  This method always throws.
            The signature claims to return an exception to allow callers to throw this method
            to satisfy C# execution path constraints.
            </returns>
        </member>
        <member name="M:Microsoft.Verify.NotDisposed(Microsoft.IDisposableObservable,System.String)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if an object is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.NotDisposed(System.Boolean,System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.Verify.NotDisposed(System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if a condition is false.
            </summary>
        </member>
        <member name="T:Microsoft.Assumes">
            <summary>
            Common runtime checks that throw public error exceptions upon failure.
            </summary>
            <content>
            Contains the inner exception thrown by Assumes.
            </content>
        </member>
        <member name="M:Microsoft.Assumes.NotNull``1(``0)">
            <summary>
            Throws an exception if the specified value is null.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Microsoft.Assumes.NotNullOrEmpty(System.String)">
            <summary>
            Throws an exception if the specified value is null or empty.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Throws an exception if the specified value is null or empty.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Microsoft.Assumes.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Throws an exception if the specified value is null or empty.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Microsoft.Assumes.Null``1(``0)">
            <summary>
            Throws an exception if the specified value is not null.
            </summary>
            <typeparam name="T">The type of value to test.</typeparam>
        </member>
        <member name="M:Microsoft.Assumes.Is``1(System.Object)">
            <summary>
            Throws an exception if the specified object is not of a given type.
            </summary>
            <typeparam name="T">The type the value is expected to be.</typeparam>
            <param name="value">The value to test.</param>
        </member>
        <member name="M:Microsoft.Assumes.False(System.Boolean,System.String)">
            <summary>
            Throws an public exception if a condition evaluates to true.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.False(System.Boolean,System.String,System.Object)">
            <summary>
            Throws an public exception if a condition evaluates to true.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.False(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws an public exception if a condition evaluates to true.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.True(System.Boolean,System.String)">
            <summary>
            Throws an public exception if a condition evaluates to false.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.True(System.Boolean,System.String,System.Object)">
            <summary>
            Throws an public exception if a condition evaluates to false.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.True(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws an public exception if a condition evaluates to false.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.NotReachable">
            <summary>
            Throws an public exception.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.Present``1(``0)">
            <summary>
            Verifies that a value is not null, and throws an exception about a missing service otherwise.
            </summary>
            <typeparam name="T">The interface of the imported part.</typeparam>
        </member>
        <member name="M:Microsoft.Assumes.Fail(System.String,System.Boolean)">
            <summary>
            Throws an public exception.
            </summary>
            <returns>Nothing, as this method always throws.  The signature allows for "throwing" Fail so C# knows execution will stop.</returns>
        </member>
        <member name="M:Microsoft.Assumes.Fail(System.String,System.Exception,System.Boolean)">
            <summary>
            Throws an public exception.
            </summary>
            <returns>Nothing, as this method always throws.  The signature allows for "throwing" Fail so C# knows execution will stop.</returns>
        </member>
        <member name="M:Microsoft.Assumes.Format(System.String,System.Object[])">
            <summary>
            Helper method that formats string arguments.
            </summary>
        </member>
        <member name="T:Microsoft.Assumes.InternalErrorException">
            <summary>
            The exception that is thrown when an internal assumption failed.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.InternalErrorException.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Assumes.InternalErrorException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.InternalErrorException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Assumes.InternalErrorException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.InternalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Assumes.InternalErrorException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Assumes.InternalErrorException.ShowAssertDialog(System.Boolean)">
            <summary>
            Show the assert if showAssert==true.
            </summary>
            <param name="showAssert">Whether to show the assert.</param>
            <remarks>
            The assertion dialog may yet be suppressed if
            ((DefaultTraceListener)System.Diagnostics.Trace.Listeners["Default"]).AssertUiEnabled == false
            </remarks>
        </member>
        <member name="T:Microsoft.EventHandlerExtensions">
            <summary>
            Extension methods to make it easier to safely invoke events.
            </summary>
        </member>
        <member name="M:Microsoft.EventHandlerExtensions.Raise(System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes any event handlers that are hooked to the specified event.
            </summary>
            <param name="handler">The event.  Null is allowed.</param>
            <param name="sender">The value to pass as the sender of the event.</param>
            <param name="e">Event arguments to include.</param>
        </member>
        <member name="M:Microsoft.EventHandlerExtensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Invokes any event handlers that are hooked to the specified event.
            </summary>
            <param name="handler">The event.  Null is allowed.</param>
            <param name="sender">The value to pass as the sender of the event.</param>
            <param name="e">Event arguments to include.</param>
        </member>
        <member name="M:Microsoft.EventHandlerExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Invokes any event handlers that are hooked to the specified event.
            </summary>
            <typeparam name="T">The type of EventArgs.</typeparam>
            <param name="handler">The event.  Null is allowed.</param>
            <param name="sender">The value to pass as the sender of the event.</param>
            <param name="e">Event arguments to include.</param>
        </member>
        <member name="T:Microsoft.IDisposableObservable">
            <summary>
            A disposable object that also provides a safe way to query its disposed status.
            </summary>
        </member>
        <member name="P:Microsoft.IDisposableObservable.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
        </member>
        <member name="T:Microsoft.PrivateErrorHelpers">
            <summary>
            Common utility methods used by the various error detection and reporting classes.
            </summary>
        </member>
        <member name="M:Microsoft.PrivateErrorHelpers.TrimGenericWrapper(System.Type,System.Type)">
            <summary>
            Trims away a given surrounding type, returning just the generic type argument,
            if the given type is in fact a generic type with just one type argument and
            the generic type matches a given wrapper type.  Otherwise, it returns the original type.
            </summary>
            <param name="type">The type to trim, or return unmodified.</param>
            <param name="wrapper">The SomeType&lt;&gt; generic type definition to trim away from <paramref name="type"/> if it is present.</param>
            <returns><paramref name="type"/>, if it is not a generic type instance of <paramref name="wrapper"/>; otherwise the type argument.</returns>
        </member>
        <member name="M:Microsoft.PrivateErrorHelpers.Format(System.String,System.Object[])">
            <summary>
            Helper method that formats string arguments.
            </summary>
        </member>
        <member name="T:Microsoft.Report">
            <summary>
            Common runtime checks that trace messages and invoke an assertion failure,
            but does *not* throw exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.Report.IfNotPresent``1(``0)">
            <summary>
            Verifies that a value is not null, and reports an error about a missing MEF component otherwise.
            </summary>
            <typeparam name="T">The interface of the imported part.</typeparam>
        </member>
        <member name="M:Microsoft.Report.If(System.Boolean,System.String)">
            <summary>
            Reports an error if a condition evaluates to true.
            </summary>
        </member>
        <member name="M:Microsoft.Report.IfNot(System.Boolean,System.String)">
            <summary>
            Reports an error if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Report.IfNot(System.Boolean,System.String,System.Object)">
            <summary>
            Reports an error if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Report.IfNot(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Reports an error if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Report.IfNot(System.Boolean,System.String,System.Object[])">
            <summary>
            Reports an error if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Report.Fail(System.String)">
            <summary>
            Reports a certain failure.
            </summary>
        </member>
        <member name="M:Microsoft.Report.Fail(System.String,System.Object[])">
            <summary>
            Reports a certain failure.
            </summary>
        </member>
        <member name="T:Microsoft.Requires">
            <summary>
            Common runtime checks that throw ArgumentExceptions upon failure.
            </summary>
        </member>
        <member name="M:Microsoft.Requires.NotNull``1(``0,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="M:Microsoft.Requires.NotNull(System.IntPtr,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is IntPtr.Zero.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is IntPtr.Zero</exception>
        </member>
        <member name="M:Microsoft.Requires.NotNull(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c></exception>
            <remarks>
            This method allows async methods to use Requires.NotNull without having to assign the result
            to local variables to avoid C# warnings.
            </remarks>
        </member>
        <member name="M:Microsoft.Requires.NotNull``1(System.Threading.Tasks.Task{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <typeparam name="T">The type of the return value of the task.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c></exception>
            <remarks>
            This method allows async methods to use Requires.NotNull without having to assign the result
            to local variables to avoid C# warnings.
            </remarks>
        </member>
        <member name="M:Microsoft.Requires.NotNullAllowStructs``1(``0,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c></exception>
            <remarks>
            This method exists for callers who themselves only know the type as a generic parameter which
            may or may not be a class, but certainly cannot be null.
            </remarks>
        </member>
        <member name="M:Microsoft.Requires.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null or empty.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Microsoft.Requires.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null, empty, or whitespace.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Microsoft.Requires.NotNullOrEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null,
            has no elements or has an element with a null value.
            </summary>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Microsoft.Requires.NotNullEmptyOrNullElements``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null,
            has no elements or has an element with a null value.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Microsoft.Requires.NullOrNotNullElements``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an exception if the specified parameter's value is not null
            <em>and</em> has an element with a null value.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="values">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Microsoft.Requires.NotEmpty(System.Guid,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is Guid.Empty
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is an empty guid (Guid.Empty)</exception>
        </member>
        <member name="M:Microsoft.Requires.Range(System.Boolean,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Requires.FailRange(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if a condition does not evaluate to true.
            </summary>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.String)">
            <summary>
            Throws an ArgumentException if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.String,System.Object)">
            <summary>
            Throws an ArgumentException if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.String,System.Object,System.Object)">
            <summary>
            Throws an ArgumentException if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Requires.Argument(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Throws an ArgumentException if a condition does not evaluate to true.
            </summary>
        </member>
        <member name="M:Microsoft.Requires.Fail(System.String)">
            <summary>
            Throws an ArgumentException.
            </summary>
            <returns>Nothing.  It always throws.</returns>
        </member>
        <member name="M:Microsoft.Requires.Fail(System.String,System.Object[])">
            <summary>
            Throws an ArgumentException.
            </summary>
            <returns>Nothing.  It always throws.</returns>
        </member>
        <member name="M:Microsoft.Requires.Fail(System.Exception,System.String,System.Object[])">
            <summary>
            Throws an ArgumentException.
            </summary>
        </member>
        <member name="M:Microsoft.Requires.Format(System.String,System.Object[])">
            <summary>
            Helper method that formats string arguments.
            </summary>
        </member>
        <member name="T:Microsoft.ValidatedNotNullAttribute">
            <summary>
            Indicates to Code Analysis that a method validates a particular parameter.
            </summary>
        </member>
        <member name="M:Microsoft.ValidatedNotNullAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ValidatedNotNullAttribute"/> class.
            </summary>
        </member>
    </members>
</doc>
