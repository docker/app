// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/docker/app/internal/com/front-service.proto

/*
	Package com is a generated protocol buffer package.

	It is generated from these files:
		github.com/docker/app/internal/com/front-service.proto

	It has these top-level messages:
		FileStat
*/
package com

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import google_protobuf1 "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FileStat struct {
	Name  string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Mode  int32  `protobuf:"varint,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
	IsDir bool   `protobuf:"varint,3,opt,name=IsDir,proto3" json:"IsDir,omitempty"`
}

func (m *FileStat) Reset()                    { *m = FileStat{} }
func (*FileStat) ProtoMessage()               {}
func (*FileStat) Descriptor() ([]byte, []int) { return fileDescriptorFrontService, []int{0} }

func (m *FileStat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileStat) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *FileStat) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

func init() {
	proto.RegisterType((*FileStat)(nil), "com.FileStat")
}
func (this *FileStat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileStat)
	if !ok {
		that2, ok := that.(FileStat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.IsDir != that1.IsDir {
		return false
	}
	return true
}
func (this *FileStat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&com.FileStat{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "IsDir: "+fmt.Sprintf("%#v", this.IsDir)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFrontService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FrontService service

type FrontServiceClient interface {
	FileContent(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (FrontService_FileContentClient, error)
	FileList(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (FrontService_FileListClient, error)
}

type frontServiceClient struct {
	cc *grpc.ClientConn
}

func NewFrontServiceClient(cc *grpc.ClientConn) FrontServiceClient {
	return &frontServiceClient{cc}
}

func (c *frontServiceClient) FileContent(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (FrontService_FileContentClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FrontService_serviceDesc.Streams[0], c.cc, "/com.FrontService/FileContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontServiceFileContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FrontService_FileContentClient interface {
	Recv() (*google_protobuf1.BytesValue, error)
	grpc.ClientStream
}

type frontServiceFileContentClient struct {
	grpc.ClientStream
}

func (x *frontServiceFileContentClient) Recv() (*google_protobuf1.BytesValue, error) {
	m := new(google_protobuf1.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *frontServiceClient) FileList(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (FrontService_FileListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FrontService_serviceDesc.Streams[1], c.cc, "/com.FrontService/FileList", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontServiceFileListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FrontService_FileListClient interface {
	Recv() (*FileStat, error)
	grpc.ClientStream
}

type frontServiceFileListClient struct {
	grpc.ClientStream
}

func (x *frontServiceFileListClient) Recv() (*FileStat, error) {
	m := new(FileStat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FrontService service

type FrontServiceServer interface {
	FileContent(*google_protobuf1.StringValue, FrontService_FileContentServer) error
	FileList(*google_protobuf1.StringValue, FrontService_FileListServer) error
}

func RegisterFrontServiceServer(s *grpc.Server, srv FrontServiceServer) {
	s.RegisterService(&_FrontService_serviceDesc, srv)
}

func _FrontService_FileContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FrontServiceServer).FileContent(m, &frontServiceFileContentServer{stream})
}

type FrontService_FileContentServer interface {
	Send(*google_protobuf1.BytesValue) error
	grpc.ServerStream
}

type frontServiceFileContentServer struct {
	grpc.ServerStream
}

func (x *frontServiceFileContentServer) Send(m *google_protobuf1.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _FrontService_FileList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FrontServiceServer).FileList(m, &frontServiceFileListServer{stream})
}

type FrontService_FileListServer interface {
	Send(*FileStat) error
	grpc.ServerStream
}

type frontServiceFileListServer struct {
	grpc.ServerStream
}

func (x *frontServiceFileListServer) Send(m *FileStat) error {
	return x.ServerStream.SendMsg(m)
}

var _FrontService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.FrontService",
	HandlerType: (*FrontServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileContent",
			Handler:       _FrontService_FileContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FileList",
			Handler:       _FrontService_FileList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/docker/app/internal/com/front-service.proto",
}

// Client API for RemoteStdStreams service

type RemoteStdStreamsClient interface {
	Stdin(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (RemoteStdStreams_StdinClient, error)
	Stdout(ctx context.Context, opts ...grpc.CallOption) (RemoteStdStreams_StdoutClient, error)
	Stderr(ctx context.Context, opts ...grpc.CallOption) (RemoteStdStreams_StderrClient, error)
}

type remoteStdStreamsClient struct {
	cc *grpc.ClientConn
}

func NewRemoteStdStreamsClient(cc *grpc.ClientConn) RemoteStdStreamsClient {
	return &remoteStdStreamsClient{cc}
}

func (c *remoteStdStreamsClient) Stdin(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (RemoteStdStreams_StdinClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RemoteStdStreams_serviceDesc.Streams[0], c.cc, "/com.RemoteStdStreams/Stdin", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteStdStreamsStdinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemoteStdStreams_StdinClient interface {
	Recv() (*google_protobuf1.BytesValue, error)
	grpc.ClientStream
}

type remoteStdStreamsStdinClient struct {
	grpc.ClientStream
}

func (x *remoteStdStreamsStdinClient) Recv() (*google_protobuf1.BytesValue, error) {
	m := new(google_protobuf1.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteStdStreamsClient) Stdout(ctx context.Context, opts ...grpc.CallOption) (RemoteStdStreams_StdoutClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RemoteStdStreams_serviceDesc.Streams[1], c.cc, "/com.RemoteStdStreams/Stdout", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteStdStreamsStdoutClient{stream}
	return x, nil
}

type RemoteStdStreams_StdoutClient interface {
	Send(*google_protobuf1.BytesValue) error
	CloseAndRecv() (*google_protobuf.Empty, error)
	grpc.ClientStream
}

type remoteStdStreamsStdoutClient struct {
	grpc.ClientStream
}

func (x *remoteStdStreamsStdoutClient) Send(m *google_protobuf1.BytesValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteStdStreamsStdoutClient) CloseAndRecv() (*google_protobuf.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteStdStreamsClient) Stderr(ctx context.Context, opts ...grpc.CallOption) (RemoteStdStreams_StderrClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RemoteStdStreams_serviceDesc.Streams[2], c.cc, "/com.RemoteStdStreams/Stderr", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteStdStreamsStderrClient{stream}
	return x, nil
}

type RemoteStdStreams_StderrClient interface {
	Send(*google_protobuf1.BytesValue) error
	CloseAndRecv() (*google_protobuf.Empty, error)
	grpc.ClientStream
}

type remoteStdStreamsStderrClient struct {
	grpc.ClientStream
}

func (x *remoteStdStreamsStderrClient) Send(m *google_protobuf1.BytesValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteStdStreamsStderrClient) CloseAndRecv() (*google_protobuf.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RemoteStdStreams service

type RemoteStdStreamsServer interface {
	Stdin(*google_protobuf.Empty, RemoteStdStreams_StdinServer) error
	Stdout(RemoteStdStreams_StdoutServer) error
	Stderr(RemoteStdStreams_StderrServer) error
}

func RegisterRemoteStdStreamsServer(s *grpc.Server, srv RemoteStdStreamsServer) {
	s.RegisterService(&_RemoteStdStreams_serviceDesc, srv)
}

func _RemoteStdStreams_Stdin_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoteStdStreamsServer).Stdin(m, &remoteStdStreamsStdinServer{stream})
}

type RemoteStdStreams_StdinServer interface {
	Send(*google_protobuf1.BytesValue) error
	grpc.ServerStream
}

type remoteStdStreamsStdinServer struct {
	grpc.ServerStream
}

func (x *remoteStdStreamsStdinServer) Send(m *google_protobuf1.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _RemoteStdStreams_Stdout_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteStdStreamsServer).Stdout(&remoteStdStreamsStdoutServer{stream})
}

type RemoteStdStreams_StdoutServer interface {
	SendAndClose(*google_protobuf.Empty) error
	Recv() (*google_protobuf1.BytesValue, error)
	grpc.ServerStream
}

type remoteStdStreamsStdoutServer struct {
	grpc.ServerStream
}

func (x *remoteStdStreamsStdoutServer) SendAndClose(m *google_protobuf.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteStdStreamsStdoutServer) Recv() (*google_protobuf1.BytesValue, error) {
	m := new(google_protobuf1.BytesValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RemoteStdStreams_Stderr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteStdStreamsServer).Stderr(&remoteStdStreamsStderrServer{stream})
}

type RemoteStdStreams_StderrServer interface {
	SendAndClose(*google_protobuf.Empty) error
	Recv() (*google_protobuf1.BytesValue, error)
	grpc.ServerStream
}

type remoteStdStreamsStderrServer struct {
	grpc.ServerStream
}

func (x *remoteStdStreamsStderrServer) SendAndClose(m *google_protobuf.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteStdStreamsStderrServer) Recv() (*google_protobuf1.BytesValue, error) {
	m := new(google_protobuf1.BytesValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RemoteStdStreams_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.RemoteStdStreams",
	HandlerType: (*RemoteStdStreamsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stdin",
			Handler:       _RemoteStdStreams_Stdin_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stdout",
			Handler:       _RemoteStdStreams_Stdout_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Stderr",
			Handler:       _RemoteStdStreams_Stderr_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/docker/app/internal/com/front-service.proto",
}

func (m *FileStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileStat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFrontService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Mode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFrontService(dAtA, i, uint64(m.Mode))
	}
	if m.IsDir {
		dAtA[i] = 0x18
		i++
		if m.IsDir {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintFrontService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FileStat) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFrontService(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovFrontService(uint64(m.Mode))
	}
	if m.IsDir {
		n += 2
	}
	return n
}

func sovFrontService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFrontService(x uint64) (n int) {
	return sovFrontService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FileStat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileStat{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`IsDir:` + fmt.Sprintf("%v", this.IsDir) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFrontService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FileStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrontService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDir", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDir = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFrontService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrontService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFrontService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFrontService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrontService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrontService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFrontService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFrontService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFrontService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFrontService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFrontService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/docker/app/internal/com/front-service.proto", fileDescriptorFrontService)
}

var fileDescriptorFrontService = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x33, 0xb7, 0xb7, 0xa5, 0x77, 0xee, 0xbd, 0x20, 0x83, 0x48, 0x49, 0x65, 0x28, 0xae,
	0xb2, 0xd0, 0xa4, 0x54, 0x10, 0xdc, 0x28, 0x54, 0x2d, 0x2a, 0xea, 0x22, 0x01, 0xf7, 0x69, 0x72,
	0x1a, 0x07, 0x93, 0x4c, 0x98, 0x9c, 0x28, 0xdd, 0xf9, 0x08, 0x6e, 0x7c, 0x07, 0x1f, 0xc5, 0x65,
	0x17, 0x2e, 0x5c, 0xda, 0xb8, 0x71, 0xd9, 0x47, 0x90, 0x24, 0x74, 0x63, 0xd1, 0x82, 0xbb, 0x93,
	0xff, 0x3f, 0xf9, 0xf8, 0xe6, 0xd0, 0x9d, 0x40, 0xe0, 0x55, 0x36, 0x34, 0x3d, 0x19, 0x59, 0xbe,
	0xf4, 0xae, 0x41, 0x59, 0x6e, 0x92, 0x58, 0x22, 0x46, 0x50, 0xb1, 0x1b, 0x5a, 0x45, 0x3e, 0x52,
	0x32, 0xc6, 0xad, 0x14, 0xd4, 0x8d, 0xf0, 0xc0, 0x4c, 0x94, 0x44, 0xc9, 0x6a, 0x9e, 0x8c, 0xf4,
	0x76, 0x20, 0x65, 0x10, 0x82, 0x55, 0x46, 0xc3, 0x6c, 0x64, 0x41, 0x94, 0xe0, 0xb8, 0xda, 0xd0,
	0xf9, 0xe7, 0xf2, 0x56, 0xb9, 0x49, 0x02, 0x2a, 0xad, 0xfa, 0x8d, 0x63, 0xda, 0x1c, 0x88, 0x10,
	0x1c, 0x74, 0x91, 0x31, 0xfa, 0xfb, 0xc2, 0x8d, 0xa0, 0x45, 0x3a, 0xc4, 0xf8, 0x63, 0x97, 0x73,
	0x91, 0x9d, 0x4b, 0x1f, 0x5a, 0xbf, 0x3a, 0xc4, 0xa8, 0xdb, 0xe5, 0xcc, 0x56, 0x69, 0xfd, 0x24,
	0x3d, 0x14, 0xaa, 0x55, 0xeb, 0x10, 0xa3, 0x69, 0x57, 0x1f, 0xbd, 0x07, 0x42, 0xff, 0x0d, 0x0a,
	0x47, 0xa7, 0x52, 0x64, 0xa7, 0xf4, 0x6f, 0x81, 0x3e, 0x90, 0x31, 0x42, 0x8c, 0x6c, 0xdd, 0xac,
	0x54, 0xcc, 0xb9, 0x8a, 0xe9, 0xa0, 0x12, 0x71, 0x70, 0xe9, 0x86, 0x19, 0xe8, 0xed, 0x85, 0xb6,
	0x3f, 0x46, 0x48, 0xcb, 0xb2, 0x4b, 0xd8, 0x6e, 0xa5, 0x79, 0x26, 0xd2, 0x65, 0xa0, 0xff, 0xc5,
	0x11, 0xcd, 0xf9, 0x9b, 0xba, 0xa4, 0xf7, 0x4c, 0xe8, 0x8a, 0x0d, 0x91, 0x44, 0x70, 0xd0, 0x77,
	0x50, 0x81, 0x1b, 0xa5, 0x6c, 0x8f, 0xd6, 0x1d, 0xf4, 0x45, 0xcc, 0xd6, 0x16, 0x60, 0x47, 0xc5,
	0xf5, 0x96, 0xf9, 0xec, 0xd3, 0x86, 0x83, 0xbe, 0xcc, 0x90, 0x7d, 0xb7, 0xa8, 0x7f, 0x41, 0x37,
	0xe6, 0x00, 0x50, 0xea, 0x87, 0x80, 0xfe, 0xe6, 0x64, 0xca, 0xb5, 0x97, 0x29, 0xd7, 0x66, 0x53,
	0x4e, 0xee, 0x72, 0x4e, 0x1e, 0x73, 0x4e, 0x9e, 0x72, 0x4e, 0x26, 0x39, 0x27, 0xaf, 0x39, 0x27,
	0xef, 0x39, 0xd7, 0x66, 0x39, 0x27, 0xf7, 0x6f, 0x5c, 0x1b, 0x36, 0xca, 0xff, 0xb7, 0x3f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x05, 0x84, 0xb8, 0x25, 0x69, 0x02, 0x00, 0x00,
}
