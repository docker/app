{
  "name": "packing",
  "version": "0.1.0",
  "description": "hello",
  "maintainers": [
    {
      "name": "dev1",
      "email": "dev1@example.com"
    },
    {
      "name": "dev2",
      "email": "dev2@example.com"
    }
  ],
  "invocationImages": [
    {
      "imageType": "docker",
      "image": "test-image"
    }
  ],
  "images": {
    "app-watcher": {
      "imageType": "docker",
      "image": "watcher",
      "description": "watcher"
    },
    "debug": {
      "imageType": "docker",
      "image": "busybox:latest",
      "description": "busybox:latest"
    },
    "front": {
      "imageType": "docker",
      "image": "nginx",
      "description": "nginx"
    },
    "monitor": {
      "imageType": "docker",
      "image": "busybox:latest",
      "description": "busybox:latest"
    }
  },
  "actions": {
    "com.docker.app.inspect": {
      "stateless": true
    },
    "com.docker.app.render": {
      "stateless": true
    },
    "com.docker.app.status": {}
  },
  "parameters": {
    "com.docker.app.kubernetes-namespace": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Namespace in which to deploy"
      },
      "destination": {
        "env": "DOCKER_KUBERNETES_NAMESPACE"
      },
      "apply-to": [
        "install",
        "upgrade",
        "uninstall",
        "com.docker.app.status"
      ]
    },
    "com.docker.app.orchestrator": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "",
        "swarm",
        "kubernetes"
      ],
      "metadata": {
        "description": "Orchestrator on which to deploy"
      },
      "destination": {
        "env": "DOCKER_STACK_ORCHESTRATOR"
      },
      "apply-to": [
        "install",
        "upgrade",
        "uninstall",
        "com.docker.app.status"
      ]
    },
    "com.docker.app.render-format": {
      "type": "string",
      "defaultValue": "yaml",
      "allowedValues": [
        "yaml",
        "json"
      ],
      "metadata": {
        "description": "Output format for the render command"
      },
      "destination": {
        "env": "DOCKER_RENDER_FORMAT"
      },
      "apply-to": [
        "com.docker.app.render"
      ]
    },
    "com.docker.app.share-registry-creds": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Share registry credentials with the invocation image"
      },
      "destination": {
        "env": "DOCKER_SHARE_REGISTRY_CREDS"
      }
    },
    "services.app-watcher.deploy.replicas": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/app-watcher/deploy/replicas"
      }
    },
    "services.app-watcher.deploy.resources.limits.cpus": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/app-watcher/deploy/resources/limits/cpus"
      }
    },
    "services.app-watcher.deploy.resources.limits.memory": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/app-watcher/deploy/resources/limits/memory"
      }
    },
    "services.app-watcher.deploy.resources.reservations.cpus": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/app-watcher/deploy/resources/reservations/cpus"
      }
    },
    "services.app-watcher.deploy.resources.reservations.memory": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/app-watcher/deploy/resources/reservations/memory"
      }
    },
    "services.debug.deploy.replicas": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/debug/deploy/replicas"
      }
    },
    "services.debug.deploy.resources.limits.cpus": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/debug/deploy/resources/limits/cpus"
      }
    },
    "services.debug.deploy.resources.reservations.cpus": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/debug/deploy/resources/reservations/cpus"
      }
    },
    "services.debug.deploy.resources.reservations.memory": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/debug/deploy/resources/reservations/memory"
      }
    },
    "services.front.deploy.resources.limits.cpus": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/front/deploy/resources/limits/cpus"
      }
    },
    "services.front.deploy.resources.limits.memory": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/front/deploy/resources/limits/memory"
      }
    },
    "services.front.deploy.resources.reservations.cpus": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/front/deploy/resources/reservations/cpus"
      }
    },
    "services.front.deploy.resources.reservations.memory": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/front/deploy/resources/reservations/memory"
      }
    },
    "services.monitor.deploy.replicas": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/monitor/deploy/replicas"
      }
    },
    "services.monitor.deploy.resources.limits.cpus": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/monitor/deploy/resources/limits/cpus"
      }
    },
    "services.monitor.deploy.resources.limits.memory": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/monitor/deploy/resources/limits/memory"
      }
    },
    "services.monitor.deploy.resources.reservations.cpus": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/monitor/deploy/resources/reservations/cpus"
      }
    },
    "services.monitor.deploy.resources.reservations.memory": {
      "type": "string",
      "destination": {
        "path": "/cnab/app/overrides/services/monitor/deploy/resources/reservations/memory"
      }
    },
    "watcher.cmd": {
      "type": "string",
      "defaultValue": "foo",
      "destination": {
        "env": "docker_param1"
      }
    }
  },
  "credentials": {
    "com.docker.app.registry-creds": {
      "path": "/cnab/app/registry-creds.json"
    },
    "docker.context": {
      "path": "/cnab/app/context.dockercontext"
    }
  }
}